# Copyright (c) OpenMMLab. All rights reserved.
import numpy as np
import torch

from mmcv.runner import BaseModule, auto_fp16
from torch import nn as nn
from cap.registry import OBJECT_REGISTRY
from cap.models.base_modules import (
    ConvModule2d,
    ConvTransposeModule2d,
    ConvUpsample2d,
)
__all__ = ["BEVUPFPN"]


@OBJECT_REGISTRY.register
class BEVUPFPN(nn.Module):
    """FPN used in SECOND/PointPillars/PartA2/MVXNet.

    Args:
        in_channels (list[int]): Input channels of multi-scale feature maps.
        out_channels (list[int]): Output channels of feature maps.
        upsample_strides (list[int]): Strides used to upsample the
            feature maps.
        norm_cfg (dict): Config dict of normalization layers.
        upsample_cfg (dict): Config dict of upsample layers.
        conv_cfg (dict): Config dict of conv layers.
        use_conv_for_no_stride (bool): Whether to use conv when stride is 1.
    """

    def __init__(self,
                 in_channels=[128, 128, 256],
                 out_channels=[256, 256, 256],
                 upsample_strides=[1, 2, 4],
                 use_conv_for_no_stride=False,
                 init_cfg=None):
        # if for GroupNorm,
        # cfg is dict(type='GN', num_groups=num_groups, eps=1e-3, affine=True)
        super(BEVUPFPN, self).__init__()
        assert len(out_channels) == len(upsample_strides) == len(in_channels)
        self.in_channels = in_channels
        self.out_channels = out_channels
        self.fp16_enabled = False
        deblocks = []
        for i, out_channel in enumerate(out_channels):
            stride = upsample_strides[i]
            if stride > 1 or (stride == 1 and not use_conv_for_no_stride):
                upsample_layer = ConvModule2d(
                    in_channels=in_channels[i],
                    out_channels=out_channel,
                    padding=0,
                    kernel_size=1,
                    stride=upsample_strides[i],
                    bias=True,
                    norm_layer=None)
            else:
                stride = np.round(1 / stride).astype(np.int64)
                upsample_layer = ConvModule2d(
                    in_channels=in_channels[i],
                    out_channels=out_channel,
                    padding=0,
                    kernel_size=stride,
                    stride=stride,
                    bias=True,
                    norm_layer=None)

            deblock = nn.Sequential(upsample_layer,
                                    nn.BatchNorm2d(out_channel),
                                    # build_norm_layer(norm_cfg, out_channel)[1],
                                    nn.ReLU(inplace=True))
            deblocks.append(deblock)
        self.deblocks = nn.ModuleList(deblocks)
        #self.deblocks = deblocks

        # if init_cfg is None:
        #     self.init_cfg = [
        #         dict(type='Kaiming', layer='ConvTranspose2d'),
        #         dict(type='Constant', layer='NaiveSyncBatchNorm2d', val=1.0)
        #     ]

 
    def forward(self, x):
        """Forward function.

        Args:
            x (torch.Tensor): 4D Tensor in (N, C, H, W) shape.

        Returns:
            list[torch.Tensor]: Multi-level feature maps.
        """
        assert len(x) == len(self.in_channels)
        #ups = [deblock(x[i]) for i, deblock in enumerate(self.deblocks)]
        ups = []
        i=0
        for deblock in self.deblocks:
            deblock(x[i])
            i+=1
        if len(ups) > 1:
            out = torch.cat(ups, dim=1)
        else:
            out = ups[0]
        # assert 0
        return [out]
